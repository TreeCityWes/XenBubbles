{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\XenBubbles\\\\XenBubbles\\\\src\\\\components\\\\BubbleListSelector.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport Papa from 'papaparse';\nimport { fetchTokenData } from '../services/dexscreener';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ListSelector = styled.div`\n  margin-bottom: 20px;\n`;\n_c = ListSelector;\nconst Button = styled.button`\n  background: ${props => props.active ? '#3498db' : '#2c3e50'};\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  margin: 0 10px;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n\n  &:hover {\n    background: #3498db;\n  }\n`;\n\n// Update the lists to include file paths\n_c2 = Button;\nconst lists = [{\n  id: 'Xen',\n  file: 'Xen.csv'\n}, {\n  id: 'Xen-Alts',\n  file: 'Xen-Alts.csv'\n}, {\n  id: 'DBXen',\n  file: 'DBXen.csv'\n}];\nconst BubbleListSelector = ({\n  onListChange\n}) => {\n  _s();\n  const [activeList, setActiveList] = useState('Xen');\n  const [listData, setListData] = useState([]);\n  useEffect(() => {\n    loadListData(activeList);\n  }, [activeList]);\n  const loadListData = async listId => {\n    try {\n      const selectedList = lists.find(list => list.id === listId);\n      if (!selectedList) {\n        console.error('List not found:', listId);\n        return;\n      }\n      const response = await fetch(`/lists/${selectedList.file}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const text = await response.text();\n      Papa.parse(text, {\n        header: true,\n        complete: async results => {\n          if (results.errors.length > 0) {\n            console.error('CSV parsing errors:', results.errors);\n          }\n\n          // Filter out any empty rows and get chain and contract addresses\n          const validTokens = results.data.filter(row => row.contract && row.chain);\n\n          // Fetch market data for each token\n          const tokensWithData = await Promise.all(validTokens.map(async token => {\n            try {\n              const marketData = await fetchTokenData(token.chain, token.contract);\n              return {\n                contract: token.contract,\n                chain: token.chain,\n                ...marketData,\n                color: (marketData === null || marketData === void 0 ? void 0 : marketData.color) || '#3498db'\n              };\n            } catch (error) {\n              console.error(`Error fetching data for ${token.contract}:`, error);\n              return {\n                contract: token.contract,\n                chain: token.chain,\n                color: '#3498db'\n              };\n            }\n          }));\n          setListData(tokensWithData);\n          onListChange(tokensWithData);\n        },\n        error: error => {\n          console.error('CSV parsing error:', error);\n        }\n      });\n    } catch (error) {\n      console.error('Error loading CSV:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ListSelector, {\n    children: lists.map(list => /*#__PURE__*/_jsxDEV(Button, {\n      active: activeList === list.id,\n      onClick: () => setActiveList(list.id),\n      children: list.id\n    }, list.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(BubbleListSelector, \"I2T4ZNKlr3Dwo5pTxxVUUozh5wY=\");\n_c3 = BubbleListSelector;\nexport default BubbleListSelector;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ListSelector\");\n$RefreshReg$(_c2, \"Button\");\n$RefreshReg$(_c3, \"BubbleListSelector\");","map":{"version":3,"names":["React","useState","useEffect","styled","Papa","fetchTokenData","jsxDEV","_jsxDEV","ListSelector","div","_c","Button","button","props","active","_c2","lists","id","file","BubbleListSelector","onListChange","_s","activeList","setActiveList","listData","setListData","loadListData","listId","selectedList","find","list","console","error","response","fetch","ok","Error","status","text","parse","header","complete","results","errors","length","validTokens","data","filter","row","contract","chain","tokensWithData","Promise","all","map","token","marketData","color","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["C:/Projects/XenBubbles/XenBubbles/src/components/BubbleListSelector.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport Papa from 'papaparse';\r\nimport { fetchTokenData } from '../services/dexscreener';\r\n\r\nconst ListSelector = styled.div`\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  background: ${props => props.active ? '#3498db' : '#2c3e50'};\r\n  color: white;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  margin: 0 10px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n\r\n  &:hover {\r\n    background: #3498db;\r\n  }\r\n`;\r\n\r\n// Update the lists to include file paths\r\nconst lists = [\r\n  { id: 'Xen', file: 'Xen.csv' },\r\n  { id: 'Xen-Alts', file: 'Xen-Alts.csv' },\r\n  { id: 'DBXen', file: 'DBXen.csv' }\r\n];\r\n\r\nconst BubbleListSelector = ({ onListChange }) => {\r\n  const [activeList, setActiveList] = useState('Xen');\r\n  const [listData, setListData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    loadListData(activeList);\r\n  }, [activeList]);\r\n\r\n  const loadListData = async (listId) => {\r\n    try {\r\n      const selectedList = lists.find(list => list.id === listId);\r\n      if (!selectedList) {\r\n        console.error('List not found:', listId);\r\n        return;\r\n      }\r\n\r\n      const response = await fetch(`/lists/${selectedList.file}`);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      const text = await response.text();\r\n      \r\n      Papa.parse(text, {\r\n        header: true,\r\n        complete: async (results) => {\r\n          if (results.errors.length > 0) {\r\n            console.error('CSV parsing errors:', results.errors);\r\n          }\r\n\r\n          // Filter out any empty rows and get chain and contract addresses\r\n          const validTokens = results.data.filter(row => row.contract && row.chain);\r\n          \r\n          // Fetch market data for each token\r\n          const tokensWithData = await Promise.all(\r\n            validTokens.map(async (token) => {\r\n              try {\r\n                const marketData = await fetchTokenData(token.chain, token.contract);\r\n                return {\r\n                  contract: token.contract,\r\n                  chain: token.chain,\r\n                  ...marketData,\r\n                  color: marketData?.color || '#3498db'\r\n                };\r\n              } catch (error) {\r\n                console.error(`Error fetching data for ${token.contract}:`, error);\r\n                return {\r\n                  contract: token.contract,\r\n                  chain: token.chain,\r\n                  color: '#3498db'\r\n                };\r\n              }\r\n            })\r\n          );\r\n          \r\n          setListData(tokensWithData);\r\n          onListChange(tokensWithData);\r\n        },\r\n        error: (error) => {\r\n          console.error('CSV parsing error:', error);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Error loading CSV:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ListSelector>\r\n      {lists.map(list => (\r\n        <Button\r\n          key={list.id}\r\n          active={activeList === list.id}\r\n          onClick={() => setActiveList(list.id)}\r\n        >\r\n          {list.id}\r\n        </Button>\r\n      ))}\r\n    </ListSelector>\r\n  );\r\n};\r\n\r\nexport default BubbleListSelector; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}